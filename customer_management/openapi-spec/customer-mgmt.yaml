openapi: 3.0.1
info:
  title: Customer Management API
  contact:
    name: Balaji Varadharajan
    url: http://www.mathisi.org
    email: vbalaji215@outlook.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/License-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Development Server
paths:
  /api/v1/customer:
    get:
      tags:
      - customer
      description: Get all the customers in the system
      operationId: getAllCustomers
      responses:
        "200":
          description: Successfully retrieved all customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDtoSet'
    post:
      tags:
      - customer
      description: Create a new customer
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
        required: true
      responses:
        "201":
          description: Successfully created the customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDtoSet'
  /api/v1/customer/{customerId}:
    get:
      tags:
      - customer
      description: Get the customer by an id
      operationId: getCustomerById
      parameters:
      - name: customerId
        in: path
        description: Id of the customer to be retrieved
        required: true
        schema:
          type: string
          format: uuid
        example: c1984335-850b-43e4-9f7d-12034cef659c
      responses:
        "400":
          description: The requested customer was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiExceptionList'
        "200":
          description: Successfully retrieved the requested customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDtoSet'
  /api/v1/customer/sort:
    get:
      tags:
      - customer
      description: Get customers sorted and option use pagination
      operationId: getAllSortedCustomers
      parameters:
      - name: page
        in: query
        description: Page number requested
        required: false
        schema:
          type: string
          default: "0"
      - name: pageSize
        in: query
        description: Page size for the page
        required: false
        schema:
          type: string
          default: "5"
      - name: sortBy
        in: query
        description: Sorting column
        required: false
        schema:
          type: string
          default: customerId
      responses:
        "200":
          description: Successfully retrieved all customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDtoSet'
components:
  schemas:
    CustomerDto:
      minimum: 0
      required:
      - dateOfBirth
      - firstName
      - gender
      - lastName
      - maritalStatus
      type: object
      properties:
        customerId:
          type: string
          description: Customer Id - This is a UUID value
          format: uuid
          example: 657cfd75-634e-49f1-9556-4d79f79848ec
        firstName:
          maxLength: 100
          minLength: 2
          type: string
          description: First Name of the customer
          example: John
        lastName:
          maxLength: 100
          minLength: 2
          type: string
          description: Last Name of the customer
          example: Doe
        dateOfBirth:
          type: string
          description: Date of birth of the customer
          format: date
          example: 1983-05-21
        gender:
          type: string
          description: Gender of the customer
          example: MALE
          enum:
          - MALE
          - FEMALE
        maritalStatus:
          type: string
          description: Marital Status of the customer
          example: MARRIED
          enum:
          - SINGLE
          - MARRIED
          - DIVORCED
          - WIDOWED
      description: Customer Object
    CustomerDtoSet:
      required:
      - customerDtoSet
      type: object
      properties:
        customerDtoSet:
          minimum: 0
          uniqueItems: true
          type: array
          description: List of customers
          items:
            $ref: '#/components/schemas/CustomerDto'
      description: List of customers in the system
    ApiException:
      type: object
      properties:
        exceptionCode:
          type: string
        exceptionMessage:
          type: string
    ApiExceptionList:
      type: object
      properties:
        exceptions:
          type: array
          items:
            $ref: '#/components/schemas/ApiException'
